// Code generated by MockGen. DO NOT EDIT.
// Source: flight-status.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "apps/core/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFlightStatusService is a mock of FlightStatusService interface.
type MockFlightStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockFlightStatusServiceMockRecorder
}

// MockFlightStatusServiceMockRecorder is the mock recorder for MockFlightStatusService.
type MockFlightStatusServiceMockRecorder struct {
	mock *MockFlightStatusService
}

// NewMockFlightStatusService creates a new mock instance.
func NewMockFlightStatusService(ctrl *gomock.Controller) *MockFlightStatusService {
	mock := &MockFlightStatusService{ctrl: ctrl}
	mock.recorder = &MockFlightStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlightStatusService) EXPECT() *MockFlightStatusServiceMockRecorder {
	return m.recorder
}

// GetFlightStatus mocks base method.
func (m *MockFlightStatusService) GetFlightStatus() *models.FlightStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlightStatus")
	ret0, _ := ret[0].(*models.FlightStatus)
	return ret0
}

// GetFlightStatus indicates an expected call of GetFlightStatus.
func (mr *MockFlightStatusServiceMockRecorder) GetFlightStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlightStatus", reflect.TypeOf((*MockFlightStatusService)(nil).GetFlightStatus))
}

// ProcessDataref mocks base method.
func (m *MockFlightStatusService) ProcessDataref(datarefValues models.DatarefValues) float32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessDataref", datarefValues)
	ret0, _ := ret[0].(float32)
	return ret0
}

// ProcessDataref indicates an expected call of ProcessDataref.
func (mr *MockFlightStatusServiceMockRecorder) ProcessDataref(datarefValues interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessDataref", reflect.TypeOf((*MockFlightStatusService)(nil).ProcessDataref), datarefValues)
}

// ResetFlightStatus mocks base method.
func (m *MockFlightStatusService) ResetFlightStatus() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetFlightStatus")
}

// ResetFlightStatus indicates an expected call of ResetFlightStatus.
func (mr *MockFlightStatusServiceMockRecorder) ResetFlightStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetFlightStatus", reflect.TypeOf((*MockFlightStatusService)(nil).ResetFlightStatus))
}

// addFlightEvent mocks base method.
func (m *MockFlightStatusService) addFlightEvent(datarefValues models.DatarefValues, description string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addFlightEvent", datarefValues, description)
}

// addFlightEvent indicates an expected call of addFlightEvent.
func (mr *MockFlightStatusServiceMockRecorder) addFlightEvent(datarefValues, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addFlightEvent", reflect.TypeOf((*MockFlightStatusService)(nil).addFlightEvent), datarefValues, description)
}

// changeState mocks base method.
func (m *MockFlightStatusService) changeState(newState models.FlightState, newPollFrequency float32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "changeState", newState, newPollFrequency)
}

// changeState indicates an expected call of changeState.
func (mr *MockFlightStatusServiceMockRecorder) changeState(newState, newPollFrequency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "changeState", reflect.TypeOf((*MockFlightStatusService)(nil).changeState), newState, newPollFrequency)
}

// processDatarefClimb mocks base method.
func (m *MockFlightStatusService) processDatarefClimb(datarefValues models.DatarefValues) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "processDatarefClimb", datarefValues)
}

// processDatarefClimb indicates an expected call of processDatarefClimb.
func (mr *MockFlightStatusServiceMockRecorder) processDatarefClimb(datarefValues interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "processDatarefClimb", reflect.TypeOf((*MockFlightStatusService)(nil).processDatarefClimb), datarefValues)
}

// processDatarefCruise mocks base method.
func (m *MockFlightStatusService) processDatarefCruise(datarefValues models.DatarefValues) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "processDatarefCruise", datarefValues)
}

// processDatarefCruise indicates an expected call of processDatarefCruise.
func (mr *MockFlightStatusServiceMockRecorder) processDatarefCruise(datarefValues interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "processDatarefCruise", reflect.TypeOf((*MockFlightStatusService)(nil).processDatarefCruise), datarefValues)
}

// processDatarefDescend mocks base method.
func (m *MockFlightStatusService) processDatarefDescend(datarefValues models.DatarefValues) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "processDatarefDescend", datarefValues)
}

// processDatarefDescend indicates an expected call of processDatarefDescend.
func (mr *MockFlightStatusServiceMockRecorder) processDatarefDescend(datarefValues interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "processDatarefDescend", reflect.TypeOf((*MockFlightStatusService)(nil).processDatarefDescend), datarefValues)
}

// processDatarefLanding mocks base method.
func (m *MockFlightStatusService) processDatarefLanding(datarefValues models.DatarefValues) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "processDatarefLanding", datarefValues)
}

// processDatarefLanding indicates an expected call of processDatarefLanding.
func (mr *MockFlightStatusServiceMockRecorder) processDatarefLanding(datarefValues interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "processDatarefLanding", reflect.TypeOf((*MockFlightStatusService)(nil).processDatarefLanding), datarefValues)
}

// processDatarefParked mocks base method.
func (m *MockFlightStatusService) processDatarefParked(datarefValues models.DatarefValues) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "processDatarefParked", datarefValues)
}

// processDatarefParked indicates an expected call of processDatarefParked.
func (mr *MockFlightStatusServiceMockRecorder) processDatarefParked(datarefValues interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "processDatarefParked", reflect.TypeOf((*MockFlightStatusService)(nil).processDatarefParked), datarefValues)
}

// processDatarefTakeoff mocks base method.
func (m *MockFlightStatusService) processDatarefTakeoff(datarefValues models.DatarefValues) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "processDatarefTakeoff", datarefValues)
}

// processDatarefTakeoff indicates an expected call of processDatarefTakeoff.
func (mr *MockFlightStatusServiceMockRecorder) processDatarefTakeoff(datarefValues interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "processDatarefTakeoff", reflect.TypeOf((*MockFlightStatusService)(nil).processDatarefTakeoff), datarefValues)
}

// processDatarefTaxiIn mocks base method.
func (m *MockFlightStatusService) processDatarefTaxiIn(datarefValues models.DatarefValues) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "processDatarefTaxiIn", datarefValues)
}

// processDatarefTaxiIn indicates an expected call of processDatarefTaxiIn.
func (mr *MockFlightStatusServiceMockRecorder) processDatarefTaxiIn(datarefValues interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "processDatarefTaxiIn", reflect.TypeOf((*MockFlightStatusService)(nil).processDatarefTaxiIn), datarefValues)
}

// processDatarefTaxiOut mocks base method.
func (m *MockFlightStatusService) processDatarefTaxiOut(datarefValues models.DatarefValues) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "processDatarefTaxiOut", datarefValues)
}

// processDatarefTaxiOut indicates an expected call of processDatarefTaxiOut.
func (mr *MockFlightStatusServiceMockRecorder) processDatarefTaxiOut(datarefValues interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "processDatarefTaxiOut", reflect.TypeOf((*MockFlightStatusService)(nil).processDatarefTaxiOut), datarefValues)
}

// setArrivalFlightInfo mocks base method.
func (m *MockFlightStatusService) setArrivalFlightInfo(airportId, airportName string, timestamp, fuelWeight, totalWeight float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setArrivalFlightInfo", airportId, airportName, timestamp, fuelWeight, totalWeight)
}

// setArrivalFlightInfo indicates an expected call of setArrivalFlightInfo.
func (mr *MockFlightStatusServiceMockRecorder) setArrivalFlightInfo(airportId, airportName, timestamp, fuelWeight, totalWeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setArrivalFlightInfo", reflect.TypeOf((*MockFlightStatusService)(nil).setArrivalFlightInfo), airportId, airportName, timestamp, fuelWeight, totalWeight)
}

// setDepartureFlightInfo mocks base method.
func (m *MockFlightStatusService) setDepartureFlightInfo(airportId, airportName string, timestamp, fuelWeight, totalWeight float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setDepartureFlightInfo", airportId, airportName, timestamp, fuelWeight, totalWeight)
}

// setDepartureFlightInfo indicates an expected call of setDepartureFlightInfo.
func (mr *MockFlightStatusServiceMockRecorder) setDepartureFlightInfo(airportId, airportName, timestamp, fuelWeight, totalWeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setDepartureFlightInfo", reflect.TypeOf((*MockFlightStatusService)(nil).setDepartureFlightInfo), airportId, airportName, timestamp, fuelWeight, totalWeight)
}
